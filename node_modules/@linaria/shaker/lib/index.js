"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "shakerPlugin", {
  enumerable: true,
  get: function () {
    return _shakerPlugin.default;
  }
});
var _utils = require("@linaria/utils");
var _shakerPlugin = _interopRequireDefault(require("./plugins/shaker-plugin"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getKey = plugin => {
  if (typeof plugin === 'string') {
    return plugin;
  }
  if (Array.isArray(plugin)) {
    return getKey(plugin[0]);
  }
  if (typeof plugin === 'object' && plugin !== null && 'key' in plugin) {
    var _key;
    return (_key = plugin.key) !== null && _key !== void 0 ? _key : null;
  }
  return null;
};
const hasKeyInList = (plugin, list) => {
  const pluginKey = getKey(plugin);
  return pluginKey ? list.some(i => pluginKey.includes(i)) : false;
};
const shaker = (babelOptions, ast, code, {
  highPriorityPlugins,
  ...config
}, babel) => {
  var _babelOptions$plugins, _babelOptions$plugins2, _babelOptions$plugins3, _babelOptions$plugins4, _transformed$code;
  const preShakePlugins = (_babelOptions$plugins = (_babelOptions$plugins2 = babelOptions.plugins) === null || _babelOptions$plugins2 === void 0 ? void 0 : _babelOptions$plugins2.filter(i => hasKeyInList(i, highPriorityPlugins))) !== null && _babelOptions$plugins !== void 0 ? _babelOptions$plugins : [];
  const plugins = [...preShakePlugins, [require.resolve('./plugins/shaker-plugin'), config], ...((_babelOptions$plugins3 = babelOptions.plugins) !== null && _babelOptions$plugins3 !== void 0 ? _babelOptions$plugins3 : []).filter(i => !hasKeyInList(i, highPriorityPlugins))];
  const hasCommonjsPlugin = (_babelOptions$plugins4 = babelOptions.plugins) === null || _babelOptions$plugins4 === void 0 ? void 0 : _babelOptions$plugins4.some(i => getKey(i) === 'transform-modules-commonjs');
  if (!hasCommonjsPlugin) {
    plugins.push(require.resolve('@babel/plugin-transform-modules-commonjs'));
  }
  const transformOptions = {
    ...babelOptions,
    caller: {
      name: 'linaria'
    },
    plugins
  };
  const transformed = babel.transformFromAstSync(ast, code, transformOptions);
  if (!transformed || !(0, _utils.hasEvaluatorMetadata)(transformed.metadata)) {
    throw new Error(`${babelOptions.filename} has no shaker metadata`);
  }
  return [transformed.ast, (_transformed$code = transformed.code) !== null && _transformed$code !== void 0 ? _transformed$code : '', transformed.metadata.linariaEvaluator.imports];
};
var _default = shaker;
exports.default = _default;
//# sourceMappingURL=index.js.map