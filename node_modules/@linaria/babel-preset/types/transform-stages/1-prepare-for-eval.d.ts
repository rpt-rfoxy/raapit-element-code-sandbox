import type { BabelFileMetadata } from '@babel/core';
import type { File } from '@babel/types';
import type { StrictOptions } from '@linaria/utils';
import { EventEmitter } from '@linaria/utils';
import type { Core } from '../babel';
import type { TransformCacheCollection } from '../cache';
import type Module from '../module';
import type { ITransformFileResult, Options } from '../types';
import type { IEntrypoint } from './helpers/ModuleQueue';
export declare function prepareCode(babel: Core, item: IEntrypoint, originalAst: File, pluginOptions: StrictOptions, eventEmitter: EventEmitter): [code: string, imports: Module['imports'], metadata?: BabelFileMetadata];
export declare function createEntrypoint(babel: Core, name: string, only: string[], maybeCode: string | undefined, pluginOptions: StrictOptions, options: Pick<Options, 'root' | 'inputSourceMap'>, eventEmitter: EventEmitter): IEntrypoint | 'ignored';
export declare function prepareForEvalSync(babel: Core, cache: TransformCacheCollection, resolve: (what: string, importer: string, stack: string[]) => string, partialEntrypoint: Pick<IEntrypoint, 'code' | 'name' | 'only'>, pluginOptions: StrictOptions, options: Pick<Options, 'root' | 'inputSourceMap'>, eventEmitter?: EventEmitter): ITransformFileResult | undefined;
/**
 * Parses the specified file and recursively all its dependencies,
 * finds tags, applies eval-time replacements, removes dead code.
 */
export default function prepareForEval(babel: Core, cache: TransformCacheCollection, resolve: (what: string, importer: string, stack: string[]) => Promise<string | null>, partialEntrypoint: Pick<IEntrypoint, 'code' | 'name' | 'only'>, pluginOptions: StrictOptions, options: Pick<Options, 'root' | 'inputSourceMap'>, eventEmitter?: EventEmitter): Promise<ITransformFileResult | undefined>;
