"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransformCacheCollection = void 0;
var _crypto = require("crypto");
function hashContent(content) {
  return (0, _crypto.createHash)('sha256').update(content).digest('hex');
}
class TransformCacheCollection {
  contentHashes = new Map();
  constructor(resolveCache = new Map(), codeCache = new Map(), evalCache = new Map(), originalASTCache = new Map()) {
    this.resolveCache = resolveCache;
    this.codeCache = codeCache;
    this.evalCache = evalCache;
    this.originalASTCache = originalASTCache;
  }
  invalidateForFile(filename) {
    this.resolveCache.delete(filename);
    this.codeCache.delete(filename);
    this.evalCache.delete(filename);
    this.originalASTCache.delete(filename);
  }
  invalidateIfChanged(filename, content) {
    const hash = this.contentHashes.get(filename);
    const newHash = hashContent(content);
    if (hash !== newHash) {
      this.contentHashes.set(filename, newHash);
      this.invalidateForFile(filename);
    }
  }
}
exports.TransformCacheCollection = TransformCacheCollection;
//# sourceMappingURL=cache.js.map