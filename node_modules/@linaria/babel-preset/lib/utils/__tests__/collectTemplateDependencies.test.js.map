{"version":3,"file":"collectTemplateDependencies.test.js","names":["babel","_interopRequireWildcard","require","_generator","_interopRequireDefault","_dedent","_stripAnsi","_utils","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","File","go","code","parsed","parseAsync","filename","__filename","file","ast","path","traverse","TemplateLiteral","expressions","forEach","exp","isExpression","extractExpression","generate","describe","it","dedent","expect","toMatchSnapshot","assertions","e","stripAnsi","message"],"sources":["../../../src/utils/__tests__/collectTemplateDependencies.test.ts"],"sourcesContent":["import * as babel from '@babel/core';\nimport { parseAsync } from '@babel/core';\nimport generate from '@babel/generator';\nimport dedent from 'dedent';\nimport stripAnsi from 'strip-ansi';\n\nimport { extractExpression } from '@linaria/utils';\n\nimport type { MissedBabelCoreTypes } from '../../types';\n\nconst { File } = babel as typeof babel & MissedBabelCoreTypes;\n\nasync function go(code: string): Promise<string> {\n  const parsed = (await parseAsync(code, {\n    filename: __filename,\n  }))!;\n\n  const file = new File({ filename: __filename }, { code, ast: parsed });\n\n  file.path.traverse({\n    TemplateLiteral(path) {\n      const expressions = path.get('expressions');\n      expressions.forEach((exp) => {\n        if (exp.isExpression()) {\n          extractExpression(exp, true);\n        }\n      });\n    },\n  });\n\n  return generate(parsed).code;\n}\n\ndescribe('collectTemplateDependencies', () => {\n  it('hoist expressions', async () => {\n    const code = dedent`\n      import x from \"module\";\n\n      function fn() {\n        const value = 21;\n        const variable = \"test\";\n        const result = \"result\";\n        const template = tag\\`${'${value * 2}'}${'${variable}'}${'${(() => result)}'}${'${value * x}'}\\`;\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('should hoist expressions after imports', async () => {\n    const code = dedent`\n      import { styled } from '@linaria/react';\n      import slugify from '../__fixtures__/slugify';\n\n      export const Title = styled.h1\\`\n        &:before {\n          content: \"${\"${slugify('test')}\"}\"\n        }\n      \\`;\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('non-hoistable expression', async () => {\n    expect.assertions(1);\n\n    const code = dedent`\n      function fn(arg) {\n        {\n          const base = \"base\";\n          const variable = base + arg;\n          const template = tag\\`${'${variable}'}\\`;\n        }\n      }\n    `;\n\n    try {\n      await go(code);\n    } catch (e) {\n      expect(stripAnsi((e as { message: string }).message)).toMatchSnapshot();\n    }\n  });\n\n  it('hoist chain of statements', async () => {\n    const code = dedent`\n      import str from \"module\";\n\n      function fn() {\n        {\n          const arg = str;\n          const variable = arg + \"2\";\n          const template = tag\\`${'${variable}'}\\`;\n        }\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('hoistExpression with destructuring', async () => {\n    const code = dedent`\n      function fn() {\n        const result = \"result\";\n        const { variable } = { variable: result };\n        const template = tag\\`${'${variable}'}\\`;\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('hoistExpression with object', async () => {\n    const code = dedent`\n      const obj = {\n        variable: \"test\",\n      }\n\n      function fn() {\n        const template = tag\\`${'${obj.variable}'}\\`;\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n});\n"],"mappings":"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"}