{"version":3,"file":"3-prepare-for-runtime.js","names":["_utils","require","prepareForRuntime","babel","ast","code","valueCache","pluginOptions","options","babelConfig","_babelConfig$filename","_babelConfig$filename2","_result$ast","transformPlugins","resolve","values","transformConfig","buildOptions","envName","plugins","sourceMaps","sourceFileName","filename","inputSourceMap","root","babelrc","configFile","sourceType","result","transformFromAstSync","cwd","program","Error"],"sources":["../../src/transform-stages/3-prepare-for-runtime.ts"],"sourcesContent":["import type {\n  BabelFileResult,\n  PluginItem,\n  TransformOptions,\n} from '@babel/core';\nimport type { File } from '@babel/types';\n\nimport type { StrictOptions } from '@linaria/utils';\nimport { buildOptions } from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { Options, ValueCache } from '../types';\n\n/**\n * Parses the specified file, finds tags, applies run-time replacements,\n * removes dead code.\n */\nexport default function prepareForRuntime(\n  babel: Core,\n  ast: File,\n  code: string,\n  valueCache: ValueCache,\n  pluginOptions: StrictOptions,\n  options: Pick<Options, 'filename' | 'inputSourceMap' | 'root'>,\n  babelConfig: TransformOptions\n): BabelFileResult {\n  const transformPlugins: PluginItem[] = [\n    [\n      require.resolve('../plugins/collector'),\n      {\n        ...pluginOptions,\n        values: valueCache,\n      },\n    ],\n  ];\n\n  const transformConfig = buildOptions({\n    envName: 'linaria',\n    plugins: transformPlugins,\n    sourceMaps: true,\n    sourceFileName: babelConfig.filename ?? options.filename,\n    inputSourceMap: options.inputSourceMap,\n    root: options.root,\n    ast: true,\n    babelrc: false,\n    configFile: false,\n    sourceType: 'unambiguous',\n  });\n\n  const result = babel.transformFromAstSync(ast, code, {\n    ...transformConfig,\n    cwd: babelConfig.cwd,\n    filename: babelConfig.filename ?? options.filename,\n  });\n\n  if (!result || !result.ast?.program) {\n    throw new Error('Babel transform failed');\n  }\n\n  return result;\n}\n"],"mappings":";;;;;;AAQA,IAAAA,MAAA,GAAAC,OAAA;AAKA;AACA;AACA;AACA;AACe,SAASC,iBAAiBA,CACvCC,KAAW,EACXC,GAAS,EACTC,IAAY,EACZC,UAAsB,EACtBC,aAA4B,EAC5BC,OAA8D,EAC9DC,WAA6B,EACZ;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,WAAA;EACjB,MAAMC,gBAA8B,GAAG,CACrC,CACEZ,OAAO,CAACa,OAAO,CAAC,sBAAsB,CAAC,EACvC;IACE,GAAGP,aAAa;IAChBQ,MAAM,EAAET;EACV,CAAC,CACF,CACF;EAED,MAAMU,eAAe,GAAG,IAAAC,mBAAY,EAAC;IACnCC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAEN,gBAAgB;IACzBO,UAAU,EAAE,IAAI;IAChBC,cAAc,GAAAX,qBAAA,GAAED,WAAW,CAACa,QAAQ,cAAAZ,qBAAA,cAAAA,qBAAA,GAAIF,OAAO,CAACc,QAAQ;IACxDC,cAAc,EAAEf,OAAO,CAACe,cAAc;IACtCC,IAAI,EAAEhB,OAAO,CAACgB,IAAI;IAClBpB,GAAG,EAAE,IAAI;IACTqB,OAAO,EAAE,KAAK;IACdC,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAGzB,KAAK,CAAC0B,oBAAoB,CAACzB,GAAG,EAAEC,IAAI,EAAE;IACnD,GAAGW,eAAe;IAClBc,GAAG,EAAErB,WAAW,CAACqB,GAAG;IACpBR,QAAQ,GAAAX,sBAAA,GAAEF,WAAW,CAACa,QAAQ,cAAAX,sBAAA,cAAAA,sBAAA,GAAIH,OAAO,CAACc;EAC5C,CAAC,CAAC;EAEF,IAAI,CAACM,MAAM,IAAI,GAAAhB,WAAA,GAACgB,MAAM,CAACxB,GAAG,cAAAQ,WAAA,eAAVA,WAAA,CAAYmB,OAAO,GAAE;IACnC,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,OAAOJ,MAAM;AACf"}