"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMatchedRule = getMatchedRule;
exports.parseFile = parseFile;
var _logger = require("@linaria/logger");
var _utils = require("@linaria/utils");
function getMatchedRule(rules, filename, code) {
  for (let i = rules.length - 1; i >= 0; i--) {
    const rule = rules[i];
    if (!rule.test) {
      return rule;
    }
    if (typeof rule.test === 'function' && rule.test(filename, code)) {
      return rule;
    }
    if (rule.test instanceof RegExp && rule.test.test(filename)) {
      return rule;
    }
  }
  return {
    action: 'ignore'
  };
}
function parseFile(babel, filename, originalCode, parseConfig) {
  const log = (0, _logger.createCustomDebug)('transform:parse', (0, _utils.getFileIdx)(filename));
  const parseResult = babel.parseSync(originalCode, parseConfig);
  if (!parseResult) {
    throw new Error(`Failed to parse ${filename}`);
  }
  log('stage-1', `${filename} has been parsed`);
  return parseResult;
}
//# sourceMappingURL=parseFile.js.map